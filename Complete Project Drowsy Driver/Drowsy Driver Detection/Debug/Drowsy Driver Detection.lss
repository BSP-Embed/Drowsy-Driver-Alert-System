
Drowsy Driver Detection.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  000006c8  0000075c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800178  00800178  00000874  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ed0  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b42  00000000  00000000  00002a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cc5  00000000  00000000  0000358a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000060c  00000000  00000000  00004250  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050b  00000000  00000000  0000485c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001240  00000000  00000000  00004d67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00005fa7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 0c 01 	jmp	0x218	; 0x218 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  8a:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EyeBlinkInit>:
	Flags.EyeBlink = FALSE;
	Flags.Meas = FALSE;
}
void EyeBlinkInit(void)
{
	EYEBLINK_SENS_DDR &= ~_BV(EYEBLINK_SENS_PIN);
  92:	8c 98       	cbi	0x11, 4	; 17
	EYEBLINK_SENS_PORT |= _BV(EYEBLINK_SENS_PIN);
  94:	94 9a       	sbi	0x12, 4	; 18
  96:	08 95       	ret

00000098 <main>:
	
	return 0;
}
static void init(void)
{
	buzinit();
  98:	0e 94 6f 01 	call	0x2de	; 0x2de <buzinit>
	beep(2,100);
  9c:	64 e6       	ldi	r22, 0x64	; 100
  9e:	70 e0       	ldi	r23, 0x00	; 0
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	0e 94 72 01 	call	0x2e4	; 0x2e4 <beep>
	ledinit();
  a6:	0e 94 2b 03 	call	0x656	; 0x656 <ledinit>
	EyeBlinkInit();
  aa:	0e 94 49 00 	call	0x92	; 0x92 <EyeBlinkInit>
	disptitl();
	sei();
}
static void flagsinit(void)
{
	Flags.EyeBlink = FALSE;
  ae:	80 91 7c 01 	lds	r24, 0x017C
  b2:	8e 7f       	andi	r24, 0xFE	; 254
  b4:	80 93 7c 01 	sts	0x017C, r24
	Flags.Meas = FALSE;
  b8:	80 91 7c 01 	lds	r24, 0x017C
  bc:	8d 7f       	andi	r24, 0xFD	; 253
  be:	80 93 7c 01 	sts	0x017C, r24
	buzinit();
	beep(2,100);
	ledinit();
	EyeBlinkInit();
	flagsinit();	
	lcdinit();
  c2:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcdinit>
	uartinit();
  c6:	0e 94 3d 03 	call	0x67a	; 0x67a <uartinit>
	lcdclr();
	lcdws(" SMART VEHICLE");
}
static void tmr2init(void)
{
	TCNT2   = 75;
  ca:	8b e4       	ldi	r24, 0x4B	; 75
  cc:	84 bd       	out	0x24, r24	; 36
	TIMSK   |= _BV(TOIE2);			//ENABLE OVERFLOW INTERRUPT
  ce:	89 b7       	in	r24, 0x39	; 57
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	89 bf       	out	0x39, r24	; 57
	TCCR2  |=  _BV(CS22) | _BV(CS21) | _BV(CS20); /* PRESCALAR BY 256 */
  d4:	85 b5       	in	r24, 0x25	; 37
  d6:	87 60       	ori	r24, 0x07	; 7
  d8:	85 bd       	out	0x25, r24	; 37
	EyeBlinkInit();
	flagsinit();	
	lcdinit();
	uartinit();
	tmr2init();
	motorinit();
  da:	0e 94 2e 03 	call	0x65c	; 0x65c <motorinit>
	FireSensInit();
  de:	0e 94 a6 01 	call	0x34c	; 0x34c <FireSensInit>
	GSMinit();
  e2:	0e 94 03 02 	call	0x406	; 0x406 <GSMinit>
	AlcoSensInit();
  e6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <AlcoSensInit>
	rlyinit();
  ea:	0e 94 3a 03 	call	0x674	; 0x674 <rlyinit>
	EYEBLINK_SENS_DDR &= ~_BV(EYEBLINK_SENS_PIN);
	EYEBLINK_SENS_PORT |= _BV(EYEBLINK_SENS_PIN);
}
static void disptitl(void)
{
	lcdclr();
  ee:	0e 94 83 02 	call	0x506	; 0x506 <lcdclr>
	lcdws(" SMART VEHICLE");
  f2:	84 e6       	ldi	r24, 0x64	; 100
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcdws>
	FireSensInit();
	GSMinit();
	AlcoSensInit();
	rlyinit();
	disptitl();
	sei();
  fa:	78 94       	sei
{
	init();
	
	while (TRUE) {
		
		if (Flags.Meas) {
  fc:	80 91 7c 01 	lds	r24, 0x017C
 100:	81 ff       	sbrs	r24, 1
 102:	7f c0       	rjmp	.+254    	; 0x202 <main+0x16a>
			Flags.Meas = FALSE;
 104:	80 91 7c 01 	lds	r24, 0x017C
 108:	8d 7f       	andi	r24, 0xFD	; 253
 10a:	80 93 7c 01 	sts	0x017C, r24
			
			if (Flags.EyeBlink) {
 10e:	80 91 7c 01 	lds	r24, 0x017C
 112:	80 ff       	sbrs	r24, 0
 114:	18 c0       	rjmp	.+48     	; 0x146 <main+0xae>
				Flags.EyeBlink = FALSE;
 116:	80 91 7c 01 	lds	r24, 0x017C
 11a:	8e 7f       	andi	r24, 0xFE	; 254
 11c:	80 93 7c 01 	sts	0x017C, r24
				lcdclrr(1);
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	0e 94 0b 03 	call	0x616	; 0x616 <lcdclrr>
				lcdws("Please Wake Up..");
 126:	83 e7       	ldi	r24, 0x73	; 115
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcdws>
				beep(5,100);
 12e:	64 e6       	ldi	r22, 0x64	; 100
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	85 e0       	ldi	r24, 0x05	; 5
 134:	0e 94 72 01 	call	0x2e4	; 0x2e4 <beep>
				dlyms(DISP_DLY);
 138:	88 ee       	ldi	r24, 0xE8	; 232
 13a:	93 e0       	ldi	r25, 0x03	; 3
 13c:	0e 94 88 01 	call	0x310	; 0x310 <dlyms>
				lcdclrr(1);
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 0b 03 	call	0x616	; 0x616 <lcdclrr>
			}
			
			if (alcodet()) {
 146:	83 99       	sbic	0x10, 3	; 16
 148:	29 c0       	rjmp	.+82     	; 0x19c <main+0x104>
				lcdclrr(1);
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 0b 03 	call	0x616	; 0x616 <lcdclrr>
				lcdws("Alcohol Detected");
 150:	84 e8       	ldi	r24, 0x84	; 132
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcdws>
				rlyon();
 158:	aa 9a       	sbi	0x15, 2	; 21
				beep(2,100);
 15a:	64 e6       	ldi	r22, 0x64	; 100
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 72 01 	call	0x2e4	; 0x2e4 <beep>
				GSMsndmsg(OPhNum, MSG[1]);
 164:	60 91 62 00 	lds	r22, 0x0062
 168:	70 91 63 00 	lds	r23, 0x0063
 16c:	85 e9       	ldi	r24, 0x95	; 149
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 bb 01 	call	0x376	; 0x376 <GSMsndmsg>
				lcdclrr(1);
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 0b 03 	call	0x616	; 0x616 <lcdclrr>
				lcdws("****BLOCKED*****");
 17a:	8f e9       	ldi	r24, 0x9F	; 159
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcdws>
				ledon();
 182:	a8 9a       	sbi	0x15, 0	; 21
				sleep();
 184:	85 b7       	in	r24, 0x35	; 53
 186:	8f 78       	andi	r24, 0x8F	; 143
 188:	85 bf       	out	0x35, r24	; 53
 18a:	85 b7       	in	r24, 0x35	; 53
 18c:	80 68       	ori	r24, 0x80	; 128
 18e:	85 bf       	out	0x35, r24	; 53
 190:	88 95       	sleep
 192:	85 b7       	in	r24, 0x35	; 53
 194:	8f 77       	andi	r24, 0x7F	; 127
 196:	85 bf       	out	0x35, r24	; 53
				cli();
 198:	f8 94       	cli
				for(;;);
 19a:	ff cf       	rjmp	.-2      	; 0x19a <main+0x102>
			}
			
			if (firedet()) {
 19c:	82 9b       	sbis	0x10, 2	; 16
 19e:	31 c0       	rjmp	.+98     	; 0x202 <main+0x16a>
				lcdclrr(1);
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 0b 03 	call	0x616	; 0x616 <lcdclrr>
				lcdws(" Fire Detected");
 1a6:	80 eb       	ldi	r24, 0xB0	; 176
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcdws>
				beep(2,100);
 1ae:	64 e6       	ldi	r22, 0x64	; 100
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <beep>
				rlyon();
 1b8:	aa 9a       	sbi	0x15, 2	; 21
				MotClk();
 1ba:	0e 94 35 03 	call	0x66a	; 0x66a <MotClk>
				dlyms(2000);
 1be:	80 ed       	ldi	r24, 0xD0	; 208
 1c0:	97 e0       	ldi	r25, 0x07	; 7
 1c2:	0e 94 88 01 	call	0x310	; 0x310 <dlyms>
				MotStop();
 1c6:	0e 94 37 03 	call	0x66e	; 0x66e <MotStop>
				GSMsndmsg(OPhNum, MSG[0]);
 1ca:	60 91 60 00 	lds	r22, 0x0060
 1ce:	70 91 61 00 	lds	r23, 0x0061
 1d2:	85 e9       	ldi	r24, 0x95	; 149
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 bb 01 	call	0x376	; 0x376 <GSMsndmsg>
				lcdclrr(1);
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 0b 03 	call	0x616	; 0x616 <lcdclrr>
				lcdws("****BLOCKED*****");
 1e0:	8f e9       	ldi	r24, 0x9F	; 159
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcdws>
				ledon();
 1e8:	a8 9a       	sbi	0x15, 0	; 21
				sleep();
 1ea:	85 b7       	in	r24, 0x35	; 53
 1ec:	8f 78       	andi	r24, 0x8F	; 143
 1ee:	85 bf       	out	0x35, r24	; 53
 1f0:	85 b7       	in	r24, 0x35	; 53
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	85 bf       	out	0x35, r24	; 53
 1f6:	88 95       	sleep
 1f8:	85 b7       	in	r24, 0x35	; 53
 1fa:	8f 77       	andi	r24, 0x7F	; 127
 1fc:	85 bf       	out	0x35, r24	; 53
				cli();
 1fe:	f8 94       	cli
				for(;;);
 200:	ff cf       	rjmp	.-2      	; 0x200 <main+0x168>
			}
		}
		sleep();
 202:	85 b7       	in	r24, 0x35	; 53
 204:	8f 78       	andi	r24, 0x8F	; 143
 206:	85 bf       	out	0x35, r24	; 53
 208:	85 b7       	in	r24, 0x35	; 53
 20a:	80 68       	ori	r24, 0x80	; 128
 20c:	85 bf       	out	0x35, r24	; 53
 20e:	88 95       	sleep
 210:	85 b7       	in	r24, 0x35	; 53
 212:	8f 77       	andi	r24, 0x7F	; 127
 214:	85 bf       	out	0x35, r24	; 53
	}
 216:	72 cf       	rjmp	.-284    	; 0xfc <main+0x64>

00000218 <__vector_5>:
	TCCR2  |=  _BV(CS22) | _BV(CS21) | _BV(CS20); /* PRESCALAR BY 256 */
}

/* overflows at every 25msec */
ISR(TIMER2_OVF_vect)
{
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	8f 93       	push	r24
	static int8u i,j,k,pulses;
	
	TCNT2 = 75;
 224:	8b e4       	ldi	r24, 0x4B	; 75
 226:	84 bd       	out	0x24, r24	; 36

	if (++i >= 200) i = 0;
 228:	80 91 7b 01 	lds	r24, 0x017B
 22c:	8f 5f       	subi	r24, 0xFF	; 255
 22e:	80 93 7b 01 	sts	0x017B, r24
 232:	88 3c       	cpi	r24, 0xC8	; 200
 234:	18 f0       	brcs	.+6      	; 0x23c <__vector_5+0x24>
 236:	10 92 7b 01 	sts	0x017B, r1
 23a:	08 c0       	rjmp	.+16     	; 0x24c <__vector_5+0x34>
	switch(i) {
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	41 f0       	breq	.+16     	; 0x250 <__vector_5+0x38>
 240:	28 f0       	brcs	.+10     	; 0x24c <__vector_5+0x34>
 242:	85 30       	cpi	r24, 0x05	; 5
 244:	19 f0       	breq	.+6      	; 0x24c <__vector_5+0x34>
 246:	86 30       	cpi	r24, 0x06	; 6
 248:	21 f4       	brne	.+8      	; 0x252 <__vector_5+0x3a>
 24a:	02 c0       	rjmp	.+4      	; 0x250 <__vector_5+0x38>
		case 0: case 5: ledon(); break;
 24c:	a8 9a       	sbi	0x15, 0	; 21
 24e:	01 c0       	rjmp	.+2      	; 0x252 <__vector_5+0x3a>
		case 1: case 6: ledoff(); break;
 250:	a8 98       	cbi	0x15, 0	; 21
	}
	
	if(++k >= 20) {
 252:	80 91 7a 01 	lds	r24, 0x017A
 256:	8f 5f       	subi	r24, 0xFF	; 255
 258:	80 93 7a 01 	sts	0x017A, r24
 25c:	84 31       	cpi	r24, 0x14	; 20
 25e:	38 f0       	brcs	.+14     	; 0x26e <__vector_5+0x56>
		Flags.Meas = TRUE;
 260:	80 91 7c 01 	lds	r24, 0x017C
 264:	82 60       	ori	r24, 0x02	; 2
 266:	80 93 7c 01 	sts	0x017C, r24
		k = 0;
 26a:	10 92 7a 01 	sts	0x017A, r1
	}
	
	if (++j >= 80) {
 26e:	80 91 79 01 	lds	r24, 0x0179
 272:	8f 5f       	subi	r24, 0xFF	; 255
 274:	80 35       	cpi	r24, 0x50	; 80
 276:	18 f4       	brcc	.+6      	; 0x27e <__vector_5+0x66>
 278:	80 93 79 01 	sts	0x0179, r24
 27c:	04 c0       	rjmp	.+8      	; 0x286 <__vector_5+0x6e>
		j = 0;
 27e:	10 92 79 01 	sts	0x0179, r1
		pulses = 0;
 282:	10 92 78 01 	sts	0x0178, r1
	}
	if (eyeblink()) {
 286:	84 9b       	sbis	0x10, 4	; 16
 288:	10 c0       	rjmp	.+32     	; 0x2aa <__vector_5+0x92>
		if(++pulses >= 4){
 28a:	80 91 78 01 	lds	r24, 0x0178
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	80 93 78 01 	sts	0x0178, r24
 294:	84 30       	cpi	r24, 0x04	; 4
 296:	48 f0       	brcs	.+18     	; 0x2aa <__vector_5+0x92>
			Flags.EyeBlink = TRUE;
 298:	80 91 7c 01 	lds	r24, 0x017C
 29c:	81 60       	ori	r24, 0x01	; 1
 29e:	80 93 7c 01 	sts	0x017C, r24
			pulses = j = 0;
 2a2:	10 92 79 01 	sts	0x0179, r1
 2a6:	10 92 78 01 	sts	0x0178, r1
		}
	}
}
 2aa:	8f 91       	pop	r24
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <AlcoSensInit>:
#include "alcohol.h"

void AlcoSensInit(void)
{
	ALCO_SENS_DDR &= ~_BV(ALCO_SENS_PIN);
 2b6:	8b 98       	cbi	0x11, 3	; 17
	ALCO_SENS_PORT |= _BV(ALCO_SENS_PIN);
 2b8:	93 9a       	sbi	0x12, 3	; 18
	
	lcdclrr(1);
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 0b 03 	call	0x616	; 0x616 <lcdclrr>
	lcdws("Sensor Init:");
 2c0:	8e ed       	ldi	r24, 0xDE	; 222
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcdws>
	while ((ALCO_SENS_PPIN & _BV(ALCO_SENS_PIN)) == 0);
 2c8:	83 9b       	sbis	0x10, 3	; 16
 2ca:	fe cf       	rjmp	.-4      	; 0x2c8 <AlcoSensInit+0x12>
	lcdws("Ok");
 2cc:	8b ee       	ldi	r24, 0xEB	; 235
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcdws>
	dlyms(DISP_DLY);
 2d4:	88 ee       	ldi	r24, 0xE8	; 232
 2d6:	93 e0       	ldi	r25, 0x03	; 3
 2d8:	0e 94 88 01 	call	0x310	; 0x310 <dlyms>
 2dc:	08 95       	ret

000002de <buzinit>:
/* buz.c: driver program for buzzer */
#include "buz.h"

void buzinit(void)
{
	BUZ_DDR 		|= _BV(BUZ_PIN);
 2de:	a1 9a       	sbi	0x14, 1	; 20
	BUZ_PORT 		&= ~_BV(BUZ_PIN);
 2e0:	a9 98       	cbi	0x15, 1	; 21
 2e2:	08 95       	ret

000002e4 <beep>:
}
void beep(int8u nbeep, int16u ontime)
{
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
	while(nbeep--)	{
 2ea:	88 23       	and	r24, r24
 2ec:	69 f0       	breq	.+26     	; 0x308 <beep+0x24>
 2ee:	8b 01       	movw	r16, r22
 2f0:	c8 2f       	mov	r28, r24
		buzon();
 2f2:	a9 9a       	sbi	0x15, 1	; 21
		dlyms(ontime);
 2f4:	c8 01       	movw	r24, r16
 2f6:	0e 94 88 01 	call	0x310	; 0x310 <dlyms>
		buzoff();
 2fa:	a9 98       	cbi	0x15, 1	; 21
		dlyms(OFF_TIME);
 2fc:	84 e6       	ldi	r24, 0x64	; 100
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 88 01 	call	0x310	; 0x310 <dlyms>
 304:	c1 50       	subi	r28, 0x01	; 1
	BUZ_DDR 		|= _BV(BUZ_PIN);
	BUZ_PORT 		&= ~_BV(BUZ_PIN);
}
void beep(int8u nbeep, int16u ontime)
{
	while(nbeep--)	{
 306:	a9 f7       	brne	.-22     	; 0x2f2 <beep+0xe>
		buzon();
		dlyms(ontime);
		buzoff();
		dlyms(OFF_TIME);
	}
}
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	08 95       	ret

00000310 <dlyms>:
#include "dly.h"

void dlyms(unsigned int x)
{
	unsigned int i;
	for (i = 0; i < x; i++) 
 310:	00 97       	sbiw	r24, 0x00	; 0
 312:	69 f0       	breq	.+26     	; 0x32e <dlyms+0x1e>
 314:	20 e0       	ldi	r18, 0x00	; 0
 316:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 318:	e7 e2       	ldi	r30, 0x27	; 39
 31a:	f7 e0       	ldi	r31, 0x07	; 7
 31c:	31 97       	sbiw	r30, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <dlyms+0xc>
 320:	00 c0       	rjmp	.+0      	; 0x322 <dlyms+0x12>
 322:	00 00       	nop
 324:	2f 5f       	subi	r18, 0xFF	; 255
 326:	3f 4f       	sbci	r19, 0xFF	; 255
 328:	28 17       	cp	r18, r24
 32a:	39 07       	cpc	r19, r25
 32c:	a9 f7       	brne	.-22     	; 0x318 <dlyms+0x8>
 32e:	08 95       	ret

00000330 <dlyus>:
}

void dlyus(unsigned int x)
{
	unsigned int i;
	for (i = 0; i < x; i++)
 330:	00 97       	sbiw	r24, 0x00	; 0
 332:	59 f0       	breq	.+22     	; 0x34a <dlyus+0x1a>
 334:	20 e0       	ldi	r18, 0x00	; 0
 336:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 338:	42 e0       	ldi	r20, 0x02	; 2
 33a:	4a 95       	dec	r20
 33c:	f1 f7       	brne	.-4      	; 0x33a <dlyus+0xa>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <dlyus+0x10>
 340:	2f 5f       	subi	r18, 0xFF	; 255
 342:	3f 4f       	sbci	r19, 0xFF	; 255
 344:	28 17       	cp	r18, r24
 346:	39 07       	cpc	r19, r25
 348:	b9 f7       	brne	.-18     	; 0x338 <dlyus+0x8>
 34a:	08 95       	ret

0000034c <FireSensInit>:
#include "fire.h"

void FireSensInit(void)
{
	FIRE_SENS_DDR &= ~_BV(FIRE_SENS_PIN);
 34c:	8a 98       	cbi	0x11, 2	; 17
	FIRE_SENS_PORT |= _BV(FIRE_SENS_PIN);
 34e:	92 9a       	sbi	0x12, 2	; 18
 350:	08 95       	ret

00000352 <GSMerr>:
		return 0;
  } 
}
static void GSMerr(void)
{
	 lcdclrr(1);
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 0b 03 	call	0x616	; 0x616 <lcdclrr>
	 lcdws("FAILED !"); 
 358:	8e ee       	ldi	r24, 0xEE	; 238
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcdws>
 360:	08 95       	ret

00000362 <GSMRxResp>:
}
static int8u GSMRxResp(void)
{
	puts(ATCommand);
 362:	88 e5       	ldi	r24, 0x58	; 88
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	0e 94 4f 03 	call	0x69e	; 0x69e <puts>
	while(getchar() != 'K');
 36a:	0e 94 4b 03 	call	0x696	; 0x696 <getchar>
 36e:	8b 34       	cpi	r24, 0x4B	; 75
 370:	e1 f7       	brne	.-8      	; 0x36a <GSMRxResp+0x8>
	return 1;
}
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	08 95       	ret

00000376 <GSMsndmsg>:
static int8u GSMRxResp	(void);
static int8u GSMsndphnum(const char *PhNum);
static void GSMrxack	(void);

void GSMsndmsg(const char *PhNum, const char *GSMMsg)
{
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	ec 01       	movw	r28, r24
 380:	8b 01       	movw	r16, r22
	lcdclrr(1);
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 0b 03 	call	0x616	; 0x616 <lcdclrr>
	
	lcdws("Sending SMS:");
 388:	87 ef       	ldi	r24, 0xF7	; 247
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcdws>
  while(getchar() != 'K');
	return 1;
}
static int8u GSMsndphnum(const char *PhNum)
{
	puts(SMSNumber);
 390:	82 e4       	ldi	r24, 0x42	; 66
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	0e 94 4f 03 	call	0x69e	; 0x69e <puts>
	puts(PhNum);
 398:	ce 01       	movw	r24, r28
 39a:	0e 94 4f 03 	call	0x69e	; 0x69e <puts>
	puts("\"\r");
 39e:	84 e0       	ldi	r24, 0x04	; 4
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	0e 94 4f 03 	call	0x69e	; 0x69e <puts>
	while (getchar() != '>');
 3a6:	0e 94 4b 03 	call	0x696	; 0x696 <getchar>
 3aa:	8e 33       	cpi	r24, 0x3E	; 62
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <GSMsndmsg+0x30>
{
	lcdclrr(1);
	
	lcdws("Sending SMS:");
	if(GSMsndphnum(PhNum)) {
		puts(MSG_START);
 3ae:	86 e0       	ldi	r24, 0x06	; 6
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	0e 94 4f 03 	call	0x69e	; 0x69e <puts>
		puts(GSMMsg);
 3b6:	c8 01       	movw	r24, r16
 3b8:	0e 94 4f 03 	call	0x69e	; 0x69e <puts>
		puts(MSG_END);
 3bc:	87 e0       	ldi	r24, 0x07	; 7
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	0e 94 4f 03 	call	0x69e	; 0x69e <puts>
		putchar(0x1A);
 3c4:	8a e1       	ldi	r24, 0x1A	; 26
 3c6:	0e 94 47 03 	call	0x68e	; 0x68e <putchar>
}
static void GSMrxack(void)
{
	int8u x;
	do {
	 	x = getchar();
 3ca:	0e 94 4b 03 	call	0x696	; 0x696 <getchar>
	 }while(x != 'K' && x != 'E');
 3ce:	8b 34       	cpi	r24, 0x4B	; 75
 3d0:	41 f0       	breq	.+16     	; 0x3e2 <GSMsndmsg+0x6c>
 3d2:	85 34       	cpi	r24, 0x45	; 69
 3d4:	d1 f7       	brne	.-12     	; 0x3ca <GSMsndmsg+0x54>
	 if(x == 'E') if(! GSMRxResp() ) GSMerr();
 3d6:	0e 94 b1 01 	call	0x362	; 0x362 <GSMRxResp>
 3da:	81 11       	cpse	r24, r1
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <GSMsndmsg+0x6c>
 3de:	0e 94 a9 01 	call	0x352	; 0x352 <GSMerr>
		puts(GSMMsg);
		puts(MSG_END);
		putchar(0x1A);
		GSMrxack();
	} else	GSMerr();
	lcdws("OK");
 3e2:	83 e2       	ldi	r24, 0x23	; 35
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcdws>
	GSMRxResp();
 3ea:	0e 94 b1 01 	call	0x362	; 0x362 <GSMRxResp>
	dlyms(1000);
 3ee:	88 ee       	ldi	r24, 0xE8	; 232
 3f0:	93 e0       	ldi	r25, 0x03	; 3
 3f2:	0e 94 88 01 	call	0x310	; 0x310 <dlyms>
	lcdclrr(1);
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 0b 03 	call	0x616	; 0x616 <lcdclrr>
}
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	1f 91       	pop	r17
 402:	0f 91       	pop	r16
 404:	08 95       	ret

00000406 <GSMinit>:
int8u GSMinit(void)
{
 406:	cf 93       	push	r28
	lcdclrr(1);
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0e 94 0b 03 	call	0x616	; 0x616 <lcdclrr>
	lcdws("GSM: ");
 40e:	86 e2       	ldi	r24, 0x26	; 38
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcdws>
	if(GSMRxResp() && GSMmsgparam() ) {
 416:	0e 94 b1 01 	call	0x362	; 0x362 <GSMRxResp>
 41a:	c8 2f       	mov	r28, r24
 41c:	88 23       	and	r24, r24
 41e:	d1 f0       	breq	.+52     	; 0x454 <GSMinit+0x4e>
	while(getchar() != 'K');
	return 1;
}
static int8u GSMmsgparam(void)
{
	puts(SMSCode);
 420:	8d e4       	ldi	r24, 0x4D	; 77
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	0e 94 4f 03 	call	0x69e	; 0x69e <puts>
  while(getchar() != 'K');
 428:	0e 94 4b 03 	call	0x696	; 0x696 <getchar>
 42c:	8b 34       	cpi	r24, 0x4B	; 75
 42e:	e1 f7       	brne	.-8      	; 0x428 <GSMinit+0x22>
	puts(SMSSettings);
 430:	8f e2       	ldi	r24, 0x2F	; 47
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	0e 94 4f 03 	call	0x69e	; 0x69e <puts>
  while(getchar() != 'K');
 438:	0e 94 4b 03 	call	0x696	; 0x696 <getchar>
 43c:	8b 34       	cpi	r24, 0x4B	; 75
 43e:	e1 f7       	brne	.-8      	; 0x438 <GSMinit+0x32>
int8u GSMinit(void)
{
	lcdclrr(1);
	lcdws("GSM: ");
	if(GSMRxResp() && GSMmsgparam() ) {
		lcdws("OK");
 440:	83 e2       	ldi	r24, 0x23	; 35
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcdws>
		dlyms(1000);
 448:	88 ee       	ldi	r24, 0xE8	; 232
 44a:	93 e0       	ldi	r25, 0x03	; 3
 44c:	0e 94 88 01 	call	0x310	; 0x310 <dlyms>
		return 1;
 450:	c1 e0       	ldi	r28, 0x01	; 1
 452:	02 c0       	rjmp	.+4      	; 0x458 <GSMinit+0x52>
	} else {
		GSMerr();
 454:	0e 94 a9 01 	call	0x352	; 0x352 <GSMerr>
		return 0;
  } 
}
 458:	8c 2f       	mov	r24, r28
 45a:	cf 91       	pop	r28
 45c:	08 95       	ret

0000045e <LCDEnable>:

int8u lcdptr;

static void  LCDEnable(void)
{
    LCD_DATA_PORT &= ~ (_BV(LCD_ENABLE_PIN)); 
 45e:	c3 98       	cbi	0x18, 3	; 24
    dlyus(1);
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 98 01 	call	0x330	; 0x330 <dlyus>
    LCD_DATA_PORT |=  _BV(LCD_ENABLE_PIN);  
 468:	c3 9a       	sbi	0x18, 3	; 24
 46a:	08 95       	ret

0000046c <LCDWriteByte>:
		}
	} 
}

static void  LCDWriteByte(char  LCDData)
{
 46c:	cf 93       	push	r28
 46e:	c8 2f       	mov	r28, r24
    LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F)|(LCDData & 0xF0);
 470:	88 b3       	in	r24, 0x18	; 24
 472:	9c 2f       	mov	r25, r28
 474:	90 7f       	andi	r25, 0xF0	; 240
 476:	8f 70       	andi	r24, 0x0F	; 15
 478:	89 2b       	or	r24, r25
 47a:	88 bb       	out	0x18, r24	; 24
    LCDEnable();
 47c:	0e 94 2f 02 	call	0x45e	; 0x45e <LCDEnable>
    LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F)|((LCDData << 4) & 0xF0);
 480:	28 b3       	in	r18, 0x18	; 24
 482:	30 e1       	ldi	r19, 0x10	; 16
 484:	c3 9f       	mul	r28, r19
 486:	c0 01       	movw	r24, r0
 488:	11 24       	eor	r1, r1
 48a:	92 2f       	mov	r25, r18
 48c:	9f 70       	andi	r25, 0x0F	; 15
 48e:	89 2b       	or	r24, r25
 490:	88 bb       	out	0x18, r24	; 24
    LCDEnable();
 492:	0e 94 2f 02 	call	0x45e	; 0x45e <LCDEnable>
    dlyus(750);
 496:	8e ee       	ldi	r24, 0xEE	; 238
 498:	92 e0       	ldi	r25, 0x02	; 2
 49a:	0e 94 98 01 	call	0x330	; 0x330 <dlyus>
}
 49e:	cf 91       	pop	r28
 4a0:	08 95       	ret

000004a2 <lcdwc>:
    LCD_DATA_PORT |=  _BV(LCD_ENABLE_PIN);  
}

void lcdwc(int8u x)
{
    LCD_DATA_PORT &= ~ (_BV(LCD_REGISTER_SELECT_PIN)); 
 4a2:	c2 98       	cbi	0x18, 2	; 24
    LCDWriteByte(x);
 4a4:	0e 94 36 02 	call	0x46c	; 0x46c <LCDWriteByte>
 4a8:	08 95       	ret

000004aa <lcdwd>:
}

void lcdwd(char ch)
{
    LCD_DATA_PORT |=  _BV(LCD_REGISTER_SELECT_PIN);
 4aa:	c2 9a       	sbi	0x18, 2	; 24
    LCDWriteByte(ch);
 4ac:	0e 94 36 02 	call	0x46c	; 0x46c <LCDWriteByte>
 4b0:	08 95       	ret

000004b2 <lcdws>:
}

void lcdws(char *s){
 4b2:	0f 93       	push	r16
 4b4:	1f 93       	push	r17
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
	while (*s) {
 4ba:	fc 01       	movw	r30, r24
 4bc:	20 81       	ld	r18, Z
 4be:	22 23       	and	r18, r18
 4c0:	e9 f0       	breq	.+58     	; 0x4fc <lcdws+0x4a>
 4c2:	ec 01       	movw	r28, r24
				break;
		}
		#else
			switch(lcdptr) {
				case 0x80+16:
				lcdptr = 0xC0;
 4c4:	00 ec       	ldi	r16, 0xC0	; 192
				break;
				case 0xC0+16:
				lcdptr = 0x80;
 4c6:	10 e8       	ldi	r17, 0x80	; 128
			case 0xD4+20:
				lcdptr = 0x80;
				break;
		}
		#else
			switch(lcdptr) {
 4c8:	80 91 7d 01 	lds	r24, 0x017D
 4cc:	80 39       	cpi	r24, 0x90	; 144
 4ce:	19 f0       	breq	.+6      	; 0x4d6 <lcdws+0x24>
 4d0:	80 3d       	cpi	r24, 0xD0	; 208
 4d2:	21 f0       	breq	.+8      	; 0x4dc <lcdws+0x2a>
 4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <lcdws+0x2e>
				case 0x80+16:
				lcdptr = 0xC0;
 4d6:	00 93 7d 01 	sts	0x017D, r16
				break;
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <lcdws+0x2e>
				case 0xC0+16:
				lcdptr = 0x80;
 4dc:	10 93 7d 01 	sts	0x017D, r17
				break;
			}
		#endif
		lcdwc(lcdptr++);
 4e0:	80 91 7d 01 	lds	r24, 0x017D
 4e4:	91 e0       	ldi	r25, 0x01	; 1
 4e6:	98 0f       	add	r25, r24
 4e8:	90 93 7d 01 	sts	0x017D, r25
 4ec:	0e 94 51 02 	call	0x4a2	; 0x4a2 <lcdwc>
		lcdwd(*s++);
 4f0:	89 91       	ld	r24, Y+
 4f2:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcdwd>
    LCD_DATA_PORT |=  _BV(LCD_REGISTER_SELECT_PIN);
    LCDWriteByte(ch);
}

void lcdws(char *s){
	while (*s) {
 4f6:	88 81       	ld	r24, Y
 4f8:	81 11       	cpse	r24, r1
 4fa:	e6 cf       	rjmp	.-52     	; 0x4c8 <lcdws+0x16>
			}
		#endif
		lcdwc(lcdptr++);
		lcdwd(*s++);
	}
}
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	1f 91       	pop	r17
 502:	0f 91       	pop	r16
 504:	08 95       	ret

00000506 <lcdclr>:
    LCDEnable();
    dlyus(750);
}
void lcdclr(void)
{
	lcdwc(0x01);
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 51 02 	call	0x4a2	; 0x4a2 <lcdwc>
	lcdptr = 0x80;	  /* Clear display LCD */
 50c:	80 e8       	ldi	r24, 0x80	; 128
 50e:	80 93 7d 01 	sts	0x017D, r24
 512:	08 95       	ret

00000514 <lcdr1>:
				break;
	}
 }
 void lcdr1(void)
 {
	lcdwc(0x80); 	  /* Begin at Line 1 */
 514:	80 e8       	ldi	r24, 0x80	; 128
 516:	0e 94 51 02 	call	0x4a2	; 0x4a2 <lcdwc>
	lcdptr = 0x80;
 51a:	80 e8       	ldi	r24, 0x80	; 128
 51c:	80 93 7d 01 	sts	0x017D, r24
 520:	08 95       	ret

00000522 <lcdr2>:
 }
  void lcdr2(void)
 {
	lcdwc(0xc0); 	  /* Begin at Line 1 */
 522:	80 ec       	ldi	r24, 0xC0	; 192
 524:	0e 94 51 02 	call	0x4a2	; 0x4a2 <lcdwc>
	lcdptr = 0xc0;
 528:	80 ec       	ldi	r24, 0xC0	; 192
 52a:	80 93 7d 01 	sts	0x017D, r24
 52e:	08 95       	ret

00000530 <lcddinit>:
	lcdwc(0x20);
	lcdwc(0x07);
	lcdwc(0x8f);
}
void lcddinit(void)
{
 530:	df 92       	push	r13
 532:	ef 92       	push	r14
 534:	ff 92       	push	r15
 536:	0f 93       	push	r16
 538:	1f 93       	push	r17
 53a:	cf 93       	push	r28
 53c:	df 93       	push	r29
	int8u i, j, adr;
	
	lcdws("  INITIALIZING");
 53e:	8c e5       	ldi	r24, 0x5C	; 92
 540:	91 e0       	ldi	r25, 0x01	; 1
 542:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcdws>
	lcdr2();
 546:	0e 94 91 02 	call	0x522	; 0x522 <lcdr2>
 54a:	d3 e0       	ldi	r29, 0x03	; 3
	lcdwc(0x20);
	lcdwc(0x07);
	lcdwc(0x8f);
}
void lcddinit(void)
{
 54c:	0f 2e       	mov	r0, r31
 54e:	f8 ec       	ldi	r31, 0xC8	; 200
 550:	df 2e       	mov	r13, r31
 552:	f0 2d       	mov	r31, r0
 554:	e1 2c       	mov	r14, r1
 556:	0f 2e       	mov	r0, r31
 558:	f0 ec       	ldi	r31, 0xC0	; 192
 55a:	ff 2e       	mov	r15, r31
 55c:	f0 2d       	mov	r31, r0
 55e:	1f c0       	rjmp	.+62     	; 0x59e <lcddinit+0x6e>
	lcdws("  INITIALIZING");
	lcdr2();
	for ( j = 0; j < LCD_NSCRL; j++ ) {
		adr = 0xc0;						// 2nd row, first coloumn
		for ( i = 0; i < 16; i++ ) {
			lcdwc(adr);			
 560:	8c 2f       	mov	r24, r28
 562:	0e 94 51 02 	call	0x4a2	; 0x4a2 <lcdwc>
			lcdwd(LCD_DOT);				
 566:	8e e2       	ldi	r24, 0x2E	; 46
 568:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcdwd>
 56c:	80 e4       	ldi	r24, 0x40	; 64
 56e:	8c 0f       	add	r24, r28
			if ( i < 8 ) dlyms(200+(50*i)); else dlyms(25);
 570:	88 30       	cpi	r24, 0x08	; 8
 572:	20 f4       	brcc	.+8      	; 0x57c <lcddinit+0x4c>
 574:	c8 01       	movw	r24, r16
 576:	0e 94 88 01 	call	0x310	; 0x310 <dlyms>
 57a:	04 c0       	rjmp	.+8      	; 0x584 <lcddinit+0x54>
 57c:	89 e1       	ldi	r24, 0x19	; 25
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 88 01 	call	0x310	; 0x310 <dlyms>
			lcdwc(adr);			
 584:	8c 2f       	mov	r24, r28
 586:	0e 94 51 02 	call	0x4a2	; 0x4a2 <lcdwc>
			lcdwd(LCD_SPC);			
 58a:	80 e2       	ldi	r24, 0x20	; 32
 58c:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcdwd>
			adr++;					// increment display aadress
 590:	cf 5f       	subi	r28, 0xFF	; 255
 592:	0e 5c       	subi	r16, 0xCE	; 206
 594:	1f 4f       	sbci	r17, 0xFF	; 255
	
	lcdws("  INITIALIZING");
	lcdr2();
	for ( j = 0; j < LCD_NSCRL; j++ ) {
		adr = 0xc0;						// 2nd row, first coloumn
		for ( i = 0; i < 16; i++ ) {
 596:	c0 3d       	cpi	r28, 0xD0	; 208
 598:	19 f7       	brne	.-58     	; 0x560 <lcddinit+0x30>
 59a:	d1 50       	subi	r29, 0x01	; 1
{
	int8u i, j, adr;
	
	lcdws("  INITIALIZING");
	lcdr2();
	for ( j = 0; j < LCD_NSCRL; j++ ) {
 59c:	21 f0       	breq	.+8      	; 0x5a6 <lcddinit+0x76>
	lcdwc(0x20);
	lcdwc(0x07);
	lcdwc(0x8f);
}
void lcddinit(void)
{
 59e:	0d 2d       	mov	r16, r13
 5a0:	1e 2d       	mov	r17, r14
 5a2:	cf 2d       	mov	r28, r15
 5a4:	dd cf       	rjmp	.-70     	; 0x560 <lcddinit+0x30>
			lcdwc(adr);			
			lcdwd(LCD_SPC);			
			adr++;					// increment display aadress
		}
	} 
}
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	1f 91       	pop	r17
 5ac:	0f 91       	pop	r16
 5ae:	ff 90       	pop	r15
 5b0:	ef 90       	pop	r14
 5b2:	df 90       	pop	r13
 5b4:	08 95       	ret

000005b6 <lcdinit>:
	}
}

void lcdinit(void)
{
    LCD_DDR = (LCD_DDR & 0x03) | 0xfc;
 5b6:	87 b3       	in	r24, 0x17	; 23
 5b8:	8c 6f       	ori	r24, 0xFC	; 252
 5ba:	87 bb       	out	0x17, r24	; 23
	LCD_DATA_PORT    &=  0x03;
 5bc:	88 b3       	in	r24, 0x18	; 24
 5be:	83 70       	andi	r24, 0x03	; 3
 5c0:	88 bb       	out	0x18, r24	; 24

	dlyms(40);
 5c2:	88 e2       	ldi	r24, 0x28	; 40
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 88 01 	call	0x310	; 0x310 <dlyms>
		lcddinit();
	#endif
}
static void LCDReset(void)
{
	lcdwc(0x33);
 5ca:	83 e3       	ldi	r24, 0x33	; 51
 5cc:	0e 94 51 02 	call	0x4a2	; 0x4a2 <lcdwc>
	dlyms(5);
 5d0:	85 e0       	ldi	r24, 0x05	; 5
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	0e 94 88 01 	call	0x310	; 0x310 <dlyms>
	lcdwc(0x33);
 5d8:	83 e3       	ldi	r24, 0x33	; 51
 5da:	0e 94 51 02 	call	0x4a2	; 0x4a2 <lcdwc>
	dlyus(500);
 5de:	84 ef       	ldi	r24, 0xF4	; 244
 5e0:	91 e0       	ldi	r25, 0x01	; 1
 5e2:	0e 94 98 01 	call	0x330	; 0x330 <dlyus>
	lcdwc(0x32);
 5e6:	82 e3       	ldi	r24, 0x32	; 50
 5e8:	0e 94 51 02 	call	0x4a2	; 0x4a2 <lcdwc>
	dlyus(500);
 5ec:	84 ef       	ldi	r24, 0xF4	; 244
 5ee:	91 e0       	ldi	r25, 0x01	; 1
 5f0:	0e 94 98 01 	call	0x330	; 0x330 <dlyus>
    LCD_DDR = (LCD_DDR & 0x03) | 0xfc;
	LCD_DATA_PORT    &=  0x03;

	dlyms(40);
	LCDReset();
    lcdwc(0x28);
 5f4:	88 e2       	ldi	r24, 0x28	; 40
 5f6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <lcdwc>
    lcdwc(0x0C);
 5fa:	8c e0       	ldi	r24, 0x0C	; 12
 5fc:	0e 94 51 02 	call	0x4a2	; 0x4a2 <lcdwc>
    lcdwc(0x06);
 600:	86 e0       	ldi	r24, 0x06	; 6
 602:	0e 94 51 02 	call	0x4a2	; 0x4a2 <lcdwc>
    lcdwc(0x01); 
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	0e 94 51 02 	call	0x4a2	; 0x4a2 <lcdwc>
	lcdclr();
 60c:	0e 94 83 02 	call	0x506	; 0x506 <lcdclr>
	#if DISPLAY_INIT > 0
		lcddinit();
 610:	0e 94 98 02 	call	0x530	; 0x530 <lcddinit>
 614:	08 95       	ret

00000616 <lcdclrr>:
void lcdclr(void)
{
	lcdwc(0x01);
	lcdptr = 0x80;	  /* Clear display LCD */
}
void lcdclrr(int8u rowno){
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	d8 2f       	mov	r29, r24
	int8u i;
	switch (rowno) {
 61c:	88 23       	and	r24, r24
 61e:	19 f0       	breq	.+6      	; 0x626 <lcdclrr+0x10>
 620:	81 30       	cpi	r24, 0x01	; 1
 622:	21 f0       	breq	.+8      	; 0x62c <lcdclrr+0x16>
 624:	05 c0       	rjmp	.+10     	; 0x630 <lcdclrr+0x1a>
		case 0:
				lcdr1();
 626:	0e 94 8a 02 	call	0x514	; 0x514 <lcdr1>
				break;
 62a:	02 c0       	rjmp	.+4      	; 0x630 <lcdclrr+0x1a>
		case 1:
				lcdr2();
 62c:	0e 94 91 02 	call	0x522	; 0x522 <lcdr2>
void lcdclr(void)
{
	lcdwc(0x01);
	lcdptr = 0x80;	  /* Clear display LCD */
}
void lcdclrr(int8u rowno){
 630:	c0 e1       	ldi	r28, 0x10	; 16
		case 1:
				lcdr2();
				break;
	}
	for (i = 0; i < 16; i++)
		lcdwd(LCD_SPC);
 632:	80 e2       	ldi	r24, 0x20	; 32
 634:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcdwd>
 638:	c1 50       	subi	r28, 0x01	; 1
				break;
		case 1:
				lcdr2();
				break;
	}
	for (i = 0; i < 16; i++)
 63a:	d9 f7       	brne	.-10     	; 0x632 <lcdclrr+0x1c>
		lcdwd(LCD_SPC);
	switch (rowno) {
 63c:	dd 23       	and	r29, r29
 63e:	19 f0       	breq	.+6      	; 0x646 <lcdclrr+0x30>
 640:	d1 30       	cpi	r29, 0x01	; 1
 642:	21 f0       	breq	.+8      	; 0x64c <lcdclrr+0x36>
 644:	05 c0       	rjmp	.+10     	; 0x650 <lcdclrr+0x3a>
		case 0:
				lcdr1();
 646:	0e 94 8a 02 	call	0x514	; 0x514 <lcdr1>
				break;
 64a:	02 c0       	rjmp	.+4      	; 0x650 <lcdclrr+0x3a>
		case 1:
				lcdr2();
 64c:	0e 94 91 02 	call	0x522	; 0x522 <lcdr2>
				break;
	}
 }
 650:	df 91       	pop	r29
 652:	cf 91       	pop	r28
 654:	08 95       	ret

00000656 <ledinit>:
/* led.c : LED interface programs */
#include "led.h"

void ledinit(void)
{
	LED_DDR 		|= _BV(LED_PIN);
 656:	a0 9a       	sbi	0x14, 0	; 20
	LED_PORT 		&= ~_BV(LED_PIN);
 658:	a8 98       	cbi	0x15, 0	; 21
 65a:	08 95       	ret

0000065c <motorinit>:
#include "motor.h"

void motorinit(void)
{
	MOT_DDR	|= _BV(MOT1_AN) | _BV(MOT1_CA);
 65c:	84 b3       	in	r24, 0x14	; 20
 65e:	88 61       	ori	r24, 0x18	; 24
 660:	84 bb       	out	0x14, r24	; 20
	MOT_PORT	&= ~(_BV(MOT1_AN) | _BV(MOT1_CA));
 662:	85 b3       	in	r24, 0x15	; 21
 664:	87 7e       	andi	r24, 0xE7	; 231
 666:	85 bb       	out	0x15, r24	; 21
 668:	08 95       	ret

0000066a <MotClk>:
}

void  MotClk(void)
{
	MOT_PORT |= _BV(MOT1_AN);
 66a:	ab 9a       	sbi	0x15, 3	; 21
 66c:	08 95       	ret

0000066e <MotStop>:
	MOT_PORT |= _BV(MOT1_CA);
}

void MotStop(void)
{
	MOT_PORT &= ~(_BV(MOT1_AN));
 66e:	ab 98       	cbi	0x15, 3	; 21
	MOT_PORT &= ~(_BV(MOT1_CA));
 670:	ac 98       	cbi	0x15, 4	; 21
 672:	08 95       	ret

00000674 <rlyinit>:
#include "relay.h"

void rlyinit(void) {
	RLY_DDR		|= _BV(RLY_PIN);
 674:	a2 9a       	sbi	0x14, 2	; 20
	RLY_PORT 	&= ~_BV(RLY_PIN);
 676:	aa 98       	cbi	0x15, 2	; 21
 678:	08 95       	ret

0000067a <uartinit>:
#include"uart.h"

void uartinit(void)
{
	UCSRB |= _BV(RXEN) | _BV(TXEN);					//Turn on transmission and reception
 67a:	8a b1       	in	r24, 0x0a	; 10
 67c:	88 61       	ori	r24, 0x18	; 24
 67e:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= _BV(URSEL) | _BV(UCSZ0) | _BV(UCSZ1); //use 8-bit character size, select the UCSRL
 680:	80 b5       	in	r24, 0x20	; 32
 682:	86 68       	ori	r24, 0x86	; 134
 684:	80 bd       	out	0x20, r24	; 32
	UBRRL = BAUD_PRESCALE;
 686:	8f e2       	ldi	r24, 0x2F	; 47
 688:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);
 68a:	10 bc       	out	0x20, r1	; 32
 68c:	08 95       	ret

0000068e <putchar>:
}
void putchar(char ch)
{
	while((UCSRA & _BV(UDRE)) == 0) {};
 68e:	5d 9b       	sbis	0x0b, 5	; 11
 690:	fe cf       	rjmp	.-4      	; 0x68e <putchar>
	UDR = ch;
 692:	8c b9       	out	0x0c, r24	; 12
 694:	08 95       	ret

00000696 <getchar>:
	
}
int8u getchar(void)
{
	while((UCSRA & _BV(RXC) ) == 0) {};
 696:	5f 9b       	sbis	0x0b, 7	; 11
 698:	fe cf       	rjmp	.-4      	; 0x696 <getchar>
	return UDR;
 69a:	8c b1       	in	r24, 0x0c	; 12
}
 69c:	08 95       	ret

0000069e <puts>:
void puts(const char *s)
{
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	ec 01       	movw	r28, r24
	while(*s) {
 6a4:	88 81       	ld	r24, Y
 6a6:	88 23       	and	r24, r24
 6a8:	51 f0       	breq	.+20     	; 0x6be <puts+0x20>
 6aa:	21 96       	adiw	r28, 0x01	; 1
		putchar(*s++);
 6ac:	0e 94 47 03 	call	0x68e	; 0x68e <putchar>
		dlyms(1);
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 88 01 	call	0x310	; 0x310 <dlyms>
	while((UCSRA & _BV(RXC) ) == 0) {};
	return UDR;
}
void puts(const char *s)
{
	while(*s) {
 6b8:	89 91       	ld	r24, Y+
 6ba:	81 11       	cpse	r24, r1
 6bc:	f7 cf       	rjmp	.-18     	; 0x6ac <puts+0xe>
		putchar(*s++);
		dlyms(1);
	}
}
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	08 95       	ret

000006c4 <_exit>:
 6c4:	f8 94       	cli

000006c6 <__stop_program>:
 6c6:	ff cf       	rjmp	.-2      	; 0x6c6 <__stop_program>
